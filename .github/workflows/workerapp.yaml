name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  WORKER_APP_NAME: bbt-endorsement-workerapp
  NAMESPACE: bbt-endorsement
  CLUSTER_NAME: Endorsement
  CLUSTER_RESOURCE_GROUP: Endorsement_group
  SECRET: docker-hub

jobs:
  ci-cd-worker-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Api
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.Worker.App
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.WORKER_APP_NAME }}:${{ github.sha }}

      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
    
      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
    
      # Create image pull secret for Docker
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: docker.io
          container-registry-username: ${{ secrets.DOCKER_HUB_USERNAME }}
          container-registry-password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          arguments: --force true

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            ${{ github.workspace }}/manifests/worker.app/deployment.yaml
            ${{ github.workspace }}/manifests/worker.app/service.yaml
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.WORKER_APP_NAME }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
